name: Lyng2

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CI: true
  IMAGE_NAME: ghcr.io/pubrrr/lyng2

jobs:
  rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            server/target/
          key: cargo-build-${{ hashFiles('server/Cargo.toml') }}
      - name: Build
        run: cd server && cargo build --verbose
      - name: Run tests
        run: cd server && cargo test --verbose

  rustChecks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            server/target/
          key: cargo-build-${{ hashFiles('server/Cargo.toml') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true
      - name: rustfmt
        run: cd server && cargo fmt --all -- --check
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path server/Cargo.toml -- -D warnings

  react:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install
        run: cd client && npm install
      - name: Build
        run: cd client && npm run build
      - name: Test
        run: cd client && npm test

  reactChecks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install
        run: cd client && npm install
      - name: Prettier
        run: cd client && npx prettier --check src
      - name: Eslint
        run: cd client && npx eslint src --ext .js,.jsx,.ts,.tsx

  dockerImage:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3
      - name: Get branch name
        run: |
          echo "BRANCH=$(eval 'echo $GITHUB_REF | sed s/refs\\/heads\\/// | sed s/\\//__/g ')" >> $GITHUB_ENV
      - name: Build image
        run: docker build -t new_image .
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        if: ${{ !contains(env.BRANCH, 'dependabot') }}
        run: |
          docker tag new_image ${{ env.IMAGE_NAME }}:branch-${{ env.BRANCH }}
          docker push ${{ env.IMAGE_NAME }}:branch-${{ env.BRANCH }}
      - name: Add tags and push
        if: env.BRANCH == 'master'
        run: |
          docker tag new_image ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:latest
