name: Lyng2

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CI: true

jobs:
  rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            server/target/
          key: cargo-build-${{ hashFiles('server/Cargo.toml') }}
      - name: Build
        run: cd server && cargo build --verbose
      - name: Run tests
        run: cd server && cargo test --verbose

  rustChecks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            server/target/
          key: cargo-build-${{ hashFiles('server/Cargo.toml') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true
      - name: rustfmt
        run: cd server && cargo fmt --all -- --check
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path server/Cargo.toml -- -D warnings

  react:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install
        run: cd client && npm install
      - name: Build
        run: cd client && npm run build
      - name: Test
        run: cd client && npm test

  reactChecks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install
        run: cd client && npm install
      - name: Prettier
        run: cd client && npx prettier --check src
      - name: Eslint
        run: cd client && npx eslint src --ext .js,.jsx,.ts,.tsx

  dockerImage:
    name: 'Build Docker image'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3
      - name: Get branch name
        run: |
          echo "BRANCH=$(eval 'echo $GITHUB_REF | sed s/refs\\/heads\\/// | sed s/\\//__/g ')" >> $GITHUB_ENV
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/pubrrr/lyng2
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=ghcr.io/pubrrr/lyng2:latest
          cache-to: type=inline

  playwrightTests:
    name: 'Playwright Tests'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: cd tests && npm ci
      - name: Install Playwright Browsers
        run: cd tests && npx playwright install --with-deps
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/pubrrr/lyng2
          tags: |
            type=ref,event=branch
      - name: Wait for Docker image
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Build Docker image'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Start Lyng2 Docker container
        run: "docker run -p 3000:80 -d ${{ steps.meta.outputs.tags }}"
      - name: Run Playwright tests
        run: cd tests && BASE_URL=http://localhost:3000 npx playwright test
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/playwright-report/
          retention-days: 2